// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String          @id @default(cuid())
  username      String
  email         String          @unique
  emailVerified DateTime?       @map("email_verified")
  password      String
  imageUrl      String?
  accounts      Account[]
  sessions      Session[]
  UserToProject UserToProject[]

  @@map("users")
}

model Project {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String
  githubUrl      String
  commits        Commit[]
  userToProjects UserToProject[]
}

model UserToProject {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Commit {
  id                 String   @id @default(cuid())
  commitMessage      String
  commitHash         String
  commitAuthorName   String
  commitAuthorAvatar String
  commitDate         DateTime
  summary            String
  projectId          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  project            Project  @relation(fields: [projectId], references: [id])
}
